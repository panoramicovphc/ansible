name: ".reusable-deploy"

on:
  workflow_call:
    inputs:
      ENVIRONMENT_STAGE_NAME:
        description: "The name of the environment to deploy to (dev, qa, prod, etc.)"
        required: true
        type: "string"
      ENVIRONMENT_RUNNER_LABEL:
        description: "The label of the runner to use for the deployment"
        required: true
        type: "string"
      ARTIFACT_NAME:
        description: "The name of the artifact to deploy"
        required: true
        type: "string"
      ARTIFACT_PROJECT_PATH:
        description: "The path to the Ansible project"
        required: false
        type: "string"
      HOSTINGERVPS_USER_LOGIN:
        description: "The login for the Hostingervps user"
        required: false
        type: "string"
    secrets:
      HOSTINGERVPS_USER_PASSWORD:
        description: "The password for the Hostingervps user"
        required: true
      CF_TUNNEL_TOKEN_HOSTINGERVPS:
        description: "The Cloudflare tunnel token for Hostingervps"
        required: true

jobs:
  deploy:
    name: "Reusable Deploy"
    runs-on: [ "panoramicovphc", "self-hosted", "${{ inputs.ENVIRONMENT_RUNNER_LABEL }}" ]
    environment: "${{ inputs.ENVIRONMENT_STAGE_NAME }}"
    env:
      ENVIRONMENT_STAGE_NAME: "${{ inputs.ENVIRONMENT_STAGE_NAME }}"
      ARTIFACT_NAME: "${{ inputs.ARTIFACT_NAME }}"
      ARTIFACT_PATH: "${{ github.workspace }}/${{ inputs.ARTIFACT_NAME }}"
      ANSIBLE_PROJECT_PATH: "${{ inputs.ARTIFACT_PROJECT_PATH }}"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.ARTIFACT_NAME }}"
      - name: "Create timestamp variable"
        id: "create-timestamp"
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      - name: "Ensure backup directory exists"
        run: |
          if [ ! -d "${ANSIBLE_PROJECT_PATH}_backup" ]; then
            sudo mkdir -p "${ANSIBLE_PROJECT_PATH}_backup"
            sudo chown $USER:$USER "${ANSIBLE_PROJECT_PATH}_backup"
          fi
      - name: "Create backup of current project directory"
        run: |
          if [ -d "${ANSIBLE_PROJECT_PATH}" ]; then
            sudo tar --exclude="${ANSIBLE_PROJECT_PATH}/_dropfolder" --exclude="${ANSIBLE_PROJECT_PATH}/.git" -czf "${ANSIBLE_PROJECT_PATH}_backup/ansible_backup_${{ steps.create-timestamp.outputs.timestamp }}.tar.gz" -C "$(dirname ${ANSIBLE_PROJECT_PATH})" "$(basename ${ANSIBLE_PROJECT_PATH})"
          fi
      - name: "Ensure project directory exists and is empty"
        run: |
          if [ -d "${ANSIBLE_PROJECT_PATH}" ]; then
            sudo rm -rf "${ANSIBLE_PROJECT_PATH}"
          fi
          sudo mkdir -p "${ANSIBLE_PROJECT_PATH}"
      - name: "Extract artifact"
        run: |
          sudo tar -xzf "${{ env.ARTIFACT_PATH }}" -C "${ANSIBLE_PROJECT_PATH}"
      - name: "Run ansible-setup.sh"
        run: |
          sudo chmod +x ${ANSIBLE_PROJECT_PATH}/ansible-setup.sh
          ${ANSIBLE_PROJECT_PATH}/ansible-setup.sh
      - name: "Verify Ansible installation"
        run: |
          ansible --version
      - name: Validate or Create Dependency Files
        run: |
          if [ ! -f "${{ github.workspace }}/requirements.txt" ] && [ ! -f "${{ github.workspace }}/pyproject.toml" ]; then
            echo "No dependency file found. Creating a default requirements.txt."
            echo "ansible==7.0.0" > "${{ github.workspace }}/requirements.txt"
          fi
      - name: "Forge inventory file"
        env:
          HOSTINGERVPS_USER_LOGIN: "${{ inputs.HOSTINGERVPS_USER_LOGIN }}"
          HOSTINGERVPS_USER_PASSWORD: "${{ secrets.HOSTINGERVPS_USER_PASSWORD }}"
          CF_TUNNEL_TOKEN_HOSTINGERVPS: "${{ secrets.CF_TUNNEL_TOKEN_HOSTINGERVPS }}"
        run: |
          ansible_inventory_path="${ANSIBLE_PROJECT_PATH}/inventory"
          if [ -z "${HOSTINGERVPS_USER_LOGIN}" ]; then
            echo "Error: HOSTINGERVPS_USER_LOGIN is empty"
            exit 1
          fi
          if [ -z "${HOSTINGERVPS_USER_PASSWORD}" ]; then
            echo "Error: HOSTINGERVPS_USER_PASSWORD is empty"
            exit 1
          fi
          if [ -z "${CF_TUNNEL_TOKEN_HOSTINGERVPS}" ]; then
            echo "Error: CF_TUNNEL_TOKEN_HOSTINGERVPS is empty"
            exit 1
          fi
          if [ ! -f "${ansible_inventory_path}/hosts.ini.template" ]; then
            echo "Error: hosts.ini.template not found"
            exit 1
          fi
          if [ -f "${ansible_inventory_path}/hosts.ini" ]; then
            echo "Deleting hosts.ini found"
            sudo rm -f "${ansible_inventory_path}/hosts.ini"
          fi
          sudo envsubst < ${ansible_inventory_path}/hosts.ini.template > ${ansible_inventory_path}/hosts.ini
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: "Setup Ansible dependencies"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/setup_ansible_dependencies.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini \
            --limit ${{ env.ENVIRONMENT_STAGE_NAME }}
      - name: "Propagate Ansible project"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/propagate_ansible_project.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini \
            --limit ${{ env.ENVIRONMENT_STAGE_NAME }}
      - name: "Setup Ansible runtime"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/setup_ansible_runtime.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini \
            --limit ${{ env.ENVIRONMENT_STAGE_NAME }}
