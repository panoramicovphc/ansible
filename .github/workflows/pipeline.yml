name: "pipeline"
run-name: "${{ github.event_name }} by ${{ github.actor }} #${{ github.run_number }}.${{ github.run_attempt }}"

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for running the workflow"
        required: true
        default: "Manual trigger"

env:
  ANSIBLE_PROJECT_PATH: "${{ vars.ANSIBLE_PROJECT_PATH }}"

jobs:

  publish-artifact:
    name: "build-and-publish-artifact"
    runs-on: [ "ubuntu-24.04" ]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v2"
      - name: "Build hosts.ini"
        env:
          HOSTINGERVPS_USER_LOGIN: "${{ vars.HOSTINGERVPS_USER_LOGIN }}"
          HOSTINGERVPS_USER_PASSWORD: "${{ secrets.HOSTINGERVPS_USER_PASSWORD }}"
          CF_TUNNEL_TOKEN_HOSTINGERVPS: "${{ secrets.CF_TUNNEL_TOKEN_HOSTINGERVPS }}"
        run: |
          if [ -z "${HOSTINGERVPS_USER_LOGIN}" ]; then
            echo "Error: HOSTINGERVPS_USER_LOGIN is empty"
            exit 1
          fi
          if [ -z "${HOSTINGERVPS_USER_PASSWORD}" ]; then
            echo "Error: HOSTINGERVPS_USER_PASSWORD is empty"
            exit 1
          fi
          if [ -z "${CF_TUNNEL_TOKEN_HOSTINGERVPS}" ]; then
            echo "Error: CF_TUNNEL_TOKEN_HOSTINGERVPS is empty"
            exit 1
          fi
          envsubst < inventory/hosts.ini.template > inventory/hosts.ini
      - name: "Resolve artifact name"
        id: resolve-name
        run: |
          echo "artifact_name=artifact-v${{ github.run_number }}.${{ github.run_attempt }}.tar.gz" >> $GITHUB_ENV
      - name: "Resolve artifact path"
        id: resolve-path
        run: |
          echo "artifact_path=${RUNNER_TEMP}/${{ env.artifact_name }}" >> $GITHUB_ENV
      - name: "Build artifact"
        run: |
          tar --exclude=".git" --exclude=".github" -czf ${{ env.artifact_path }} .
      - name: "Verify artifact"
        run: |
          if [ ! -f ${{ env.artifact_path }} ]; then
            echo "Artifact was not created successfully."
            exit 1
          fi
      - name: "Upload artifact"
        uses: "actions/upload-artifact@v4"
        with:
          name: ${{ env.artifact_name }}
          if-no-files-found: error
          path: ${{ env.artifact_path }}

  deploy-dev:
    name: "deploy-dev"
    environment: "dev"
    runs-on: [ "panoramicovphc", "self-hosted", "development" ]
    needs: [ "publish-artifact" ]
    steps:
      - name: "Resolve artifact name"
        id: resolve-name
        run: |
          echo "artifact_name=artifact-v${{ github.run_number }}.${{ github.run_attempt }}.tar.gz" >> $GITHUB_ENV
      - name: "Resolve artifact path"
        id: resolve-path
        run: |
          echo "artifact_path=${GITHUB_WORKSPACE}/${{ env.artifact_name }}" >> $GITHUB_ENV
      - name: "Download artifact"
        uses: "actions/download-artifact@v4"
        with:
          name: "${{ env.artifact_name }}"
      - name: "Delete backup directory"
        run: |
          if [ -d "${ANSIBLE_PROJECT_PATH}_bkp" ]; then
            sudo rm -rf "${ANSIBLE_PROJECT_PATH}_bkp"
          fi
      - name: "Backup current project directory"
        run: |
          if [ -d "${ANSIBLE_PROJECT_PATH}" ]; then
            sudo mv "${ANSIBLE_PROJECT_PATH}" "${ANSIBLE_PROJECT_PATH}_bkp"
          fi
      - name: "Ensure project directory exists"
        run: |
          sudo mkdir -p "${ANSIBLE_PROJECT_PATH}"
      - name: "Extract artifact"
        run: |
          sudo tar -xzf "${{ env.artifact_path }}" -C "${ANSIBLE_PROJECT_PATH}"
      - name: "Run ansible-setup.sh"
        run: |
          sudo chmod +x ${ANSIBLE_PROJECT_PATH}/ansible-setup.sh
          ${ANSIBLE_PROJECT_PATH}/ansible-setup.sh
      - name: "Verify Ansible installation"
        run: |
          ansible --version
      - name: "Checkout repository"
        uses: "actions/checkout@v2"
      - name: "Install gettext (envsubst)"
        run: |
          if command -v apt-get >/dev/null; then
            sudo apt-get install -y gettext
          elif command -v yum >/dev/null; then
            sudo yum install -y gettext
          elif command -v dnf >/dev/null; then
            sudo dnf install -y gettext
          elif command -v pacman >/dev/null; then
            sudo pacman -Sy --noconfirm gettext
          elif command -v zypper >/dev/null; then
            sudo zypper install -y gettext
          else
            echo "Unsupported package manager. Please install gettext manually."
            exit 1
          fi
      - name: "Setup Ansible dependencies"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/setup_ansible_dependencies.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini
            --limit ${{ github.event.inputs.environment }}
      - name: "Propagate Ansible project"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/propagate_ansible_project.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini
            --limit ${{ github.event.inputs.environment }}
      - name: "Setup Ansible runtime"
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${ANSIBLE_PROJECT_PATH}/playbooks/setup_ansible_runtime.yml \
            -i ${ANSIBLE_PROJECT_PATH}/inventory/hosts.ini
            --limit ${{ github.event.inputs.environment }}
